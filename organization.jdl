enum EmployeeDocumentType {
    PASSPORT,
    ISIKUKOOD,
    ID
}

enum Gender {
    MALE,
    FEMALE
}

enum BusinessUnitName {
    IT,
    LEGAL,
    LOGISTICS,
    FINANCE,
    MARKETING,
    HR
}

enum TeamName {
    SNOW,
    WATER,
    FIRE
}

enum EmployeeType {
    CANDIDATE,
    LONG_TERM_CONTRACT,
    SHORT_TERM_CONTRACT,
    INTERN,
    EXTERNAL_EMPLOYEE,
    MATERNITY_LEAVE,
    FIRED,
    RESIGNED,
    QUIT
}

enum JobLevel {
    JUNIOR,
    MIDDLE,
    SENIOR,
    TEAM_LEAD,
    EXECUTIVE,
    CONSULTANT,
    ASSISTANT,
    SERVICE,
    SPECIALIST,
    MANAGER
}

enum WorkingHours {
    FULL_TIME,
    PART_TIME
}

enum CostCenter {
    COSTCENTER1,
    COSTCENTER2,
    COSTCENTER3
}

enum EducationLevel {
    PHD
    MASTER,
    BACHELOR,
    MBA,
    HIGH_SCHOOL,
    NOT_SPECIFIED
}

enum Certifications {
    JAVA_CERTIFICATION,
    ORACLE_DATABASE,
    CISCO,
    OPENSHIFT,
    MICROSOFT,
    SCRUMMASTER,
    SAP
}

enum RiskOfLoss {
    LOW,
    MEDIUM,
    HIGH,
    NOT_SPECIFIED
}

enum ReadinessForPromotion {
    READY_NOW,
    READY_IN_6_MONTHS,
    READY_IN_1_YEAR,
    READY_IN_2_YEARS,
    NOT_SPECIFIED
}

enum ProbationPeriod {
    IN_PROGRESS,
    PASSED_SUCCESSFULLY,
    PASSED_UNSUCCESSFULLY
}

enum DisabilityStatus {
    HEARING_LOSS,
    VISUAL_IMPAIRMENT,
    SPEECH,
    MENTAL_HEALTH,
    AUTISM,
    PHYSICAL,
    MOBILITY,
    NOT_SPECIFIED
}

enum WorkPlace {
    HOME,
    OFFICE,
    REMOTE
}

enum Referral {
    EMPLOYEE,
    AGENCY,
    NOT_SPECIFIED
}

enum HobbyGroup {
    FOOTBALL,
    MUSICIAN,
    TABLE_TENNIS,
    BASKETBALL,
    YOGA
}
// @? is Employee a user HAM-47
entity Employee {
    employeeDocumentType EmployeeDocumentType required
    documentNumber UUID required
    firstName String required
    lastName String required
    phone String required
    gender Gender required
    birthDate LocalDate required
    citizenship String required
    businessUnitName BusinessUnitName required
    teamName TeamName required
    employeeType EmployeeType required
    startDate LocalDate required
    endDate LocalDate
    jobTitle String required // @? add enums
    jobLevel JobLevel required
    jobLevelIndicator Integer required min(1) max(4)
    workingHours WorkingHours required
    costCenter CostCenter required
    grossSalary Integer required // salary update date (this year|last year|2+year)
                                 // @? make an entity of salary that has all salary fields + updatedAt
    salaryUpdateDate LocalDate
    workOverTime Boolean
    educationLevel EducationLevel required
    certifications Certifications
    riskOfLoss RiskOfLoss
    readinessForPromotion ReadinessForPromotion 
    probationPeriod ProbationPeriod
    disabilityStatus DisabilityStatus required
    workPlace WorkPlace required
    contractDue LocalDate
    referral Referral required
    hobbyGroup HobbyGroup
    userPic String // @? rename to photo? 
    password String
    availableVacationDays Integer
    corporateEmail String
    budgetAvailableForEducation Integer
    medicalCheckUpDueDate Boolean // due date or to date
    isActive Boolean
    timezone String // @? timezone is not under create employee
}

entity Note {
    title String required
    content String required
}

entity Location {
    title String required    
    address String
    worker String
    team String // @? team entity or ids or name?
    vendor String required
    customer String required
    // includeMap coordinates (checkbox) Boolean?
    // customData (custom properties)
    latitude Double
    logitude Double
    createdAt LocalDate
    createdBy String
    teamManager String
    isActive Boolean
}

entity SubLocation { // @? extend location? jhipster does not support inheritance
    title String required    
    address String
    parentLocation String // @? same as parentId?
    parentId String
    worker String
    team String // @? team entity or ids or name?
    vendor String required
    customer String required
    // includeMap coordinates (checkbox) Boolean?
    // customData (custom properties)
    latitude Double
    logitude Double
    createdAt LocalDate
    createdBy String
    teamManager String

    building String
    floor String
    workingArea String
}

entity Team {
    teamName String required
    teamDescription String
    teamUsers String // @? team entity or ids or name?
    createdAt LocalDate required
    createdBy String
    teamManager String
}

/**
 * One to many relationship.
 */
relationship OneToMany {
    Employee to Note{employee}
    Location to SubLocation{location} // location can have many sublocations
    SubLocation to SubLocation{subLocation} // sublocation can have many sublocations
}